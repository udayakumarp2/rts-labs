{"version":3,"sources":["actions/resultsActions.js","components/Navbar/Navbar.js","actions/searchActions.js","components/SearchResults/SearchResults.js","components/SearchHistory/SearchHistory.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["fetchResults","query","dispatch","axios","get","then","response","console","log","results","data","hits","type","catch","err","Navbar","state","currentSearchInput","handleInputChange","event","newSearchInput","target","value","setState","handleFormSubmit","preventDefault","props","search","className","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","onSubmit","this","onChange","placeholder","Component","connect","searches","terms","SearchResults","handleSearchResults","length","map","result","url","key","objectID","title","author","SearchHistory","retroSearch","onClick","App","Boolean","window","location","hostname","match","initState","rootReducer","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5711b64c.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const fetchResults = (query) => {\r\n\treturn (dispatch) => {\r\n\t\t//Make async call to Hacker News API\r\n\t\treturn axios\r\n\t\t\t.get(\"https://hn.algolia.com/api/v1/search?query=\" + query)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tconsole.log(response);\r\n\t\t\t\t// Capture the data we need from the response\r\n\t\t\t\tconst results = response.data.hits;\r\n\t\t\t\tdispatch({ type: \"FETCH_RESULTS\", results });\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\t// If the request fails, send error action\r\n\t\t\t\tdispatch({ type: \"FETCH_RESULTS_ERROR\", err });\r\n\t\t\t});\r\n\t};\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { search } from \"../../actions/searchActions\";\r\nimport { fetchResults } from \"../../actions/resultsActions\";\r\n\r\nclass Navbar extends Component {\r\n\tstate = {\r\n\t\tcurrentSearchInput: \"\"\r\n\t};\r\n\r\n\thandleInputChange = (event) => {\r\n\t\t// Getting the value of the input from the form\r\n\t\tlet newSearchInput = event.target.value;\r\n\r\n\t\t//And updating the component's state\r\n\t\tthis.setState({\r\n\t\t\tcurrentSearchInput: newSearchInput\r\n\t\t});\r\n\t};\r\n\r\n\thandleFormSubmit = (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tconsole.log(\"Form Submitted\");\r\n\t\tconsole.log(this.state.currentSearchInput);\r\n\r\n\t\t// We capture the current input to save to our search history\r\n\t\tthis.props.search(this.state.currentSearchInput);\r\n\r\n\t\t// And we also take that input and pass it to our AJAX call to the API\r\n\t\tthis.props.fetchResults(this.state.currentSearchInput);\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<nav className=\"navbar navbar-expand-md sticky-top navbar-dark bg-dark\">\r\n\t\t\t\t<a href=\"/\" className=\"navbar-brand\">\r\n\t\t\t\t\tHacker News\r\n\t\t\t\t</a>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName=\"navbar-toggler\"\r\n\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\tdata-toggle=\"collapse\"\r\n\t\t\t\t\tdata-target=\"#navbarNavDropdown\"\r\n\t\t\t\t\taria-controls=\"navbarNavDropdown\"\r\n\t\t\t\t\taria-expanded=\"false\"\r\n\t\t\t\t\taria-label=\"Toggle navigation\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<span className=\"navbar-toggler-icon\"></span>\r\n\t\t\t\t</button>\r\n\t\t\t\t<div className=\"collapse navbar-collapse mr-0\" id=\"navbarNavDropdown\">\r\n\t\t\t\t\t<ul className=\"navbar-nav ml-auto\">\r\n\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<form className=\"form-inline\" onSubmit={this.handleFormSubmit}>\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\tclassName=\"form-control mr-sm-2\"\r\n\t\t\t\t\t\t\t\t\ttype=\"search\"\r\n\t\t\t\t\t\t\t\t\tonChange={this.handleInputChange}\r\n\t\t\t\t\t\t\t\t\tplaceholder=\"Search for Articles\"\r\n\t\t\t\t\t\t\t\t\taria-label=\"Search\"\r\n\t\t\t\t\t\t\t\t></input>\r\n\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline-info my-2 my-sm-0\"\r\n\t\t\t\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tSearch\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t</nav>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tsearches: state.searches,\r\n\t\tresults: state.results\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tsearch: (terms) => {\r\n\t\t\tdispatch(search(terms));\r\n\t\t},\r\n\t\tfetchResults: (query) => dispatch(fetchResults(query))\r\n\t};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar);\r\n","export const search = (terms) => {\r\n\treturn {\r\n\t\ttype: \"CREATE_SEARCH\",\r\n\t\tterms: terms\r\n\t};\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass SearchResults extends Component {\r\n\t// Function to handle conditional rendering for this component\r\n\thandleSearchResults = () => {\r\n\t\t// When there is no results values being kept in the redux store\r\n\t\tif (this.props.results.length === 0) {\r\n\t\t\treturn (\r\n\t\t\t\t// Display message to client\r\n\t\t\t\t<p className=\"text-info p-3 m-2\">There are no results to display.</p>\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\t// Otherwise, display results currently being held in the store\r\n\t\t\tconst { results } = this.props;\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"list-group p-3\">\r\n\t\t\t\t\t{results.map((result) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\thref={result.url}\r\n\t\t\t\t\t\t\t\tclassName=\"list-group-item list-group-item-action list-group-item-info mt-1 mb-1\"\r\n\t\t\t\t\t\t\t\tkey={result.objectID}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<strong className=\"text-dark\">{result.title}</strong>\r\n\t\t\t\t\t\t\t\t<br></br>\r\n\t\t\t\t\t\t\t\t<strong>Author:</strong> {result.author}\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"search-results\">\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"col-12\">\r\n\t\t\t\t\t\t<h1 className=\"text-light\">Search Results</h1>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"row m-3\">\r\n\t\t\t\t\t<div className=\"col-12 p-1 bg-dark border border-info\">\r\n\t\t\t\t\t\t{this.handleSearchResults()}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tresults: state.results\r\n\t};\r\n};\r\n\r\nexport default connect(mapStateToProps)(SearchResults);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchResults } from \"../../actions/resultsActions\";\r\n\r\nclass SearchHistory extends Component {\r\n\t// This function handles retroactive searches when a search history button is clicked\r\n\tretroSearch = (event) => {\r\n\t\t// Here we grab the id of the button that is clicked and pass it to our AJAX call\r\n\t\tthis.props.fetchResults(event.target.id);\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { searches } = this.props;\r\n\t\treturn (\r\n\t\t\t<div className=\"search-results\">\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"col-12\">\r\n\t\t\t\t\t\t<h1 className=\"text-light\">Search History</h1>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"row m-3 p-2 bg-dark text-light border border-info\">\r\n\t\t\t\t\t<div className=\"col-12\">\r\n\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\tClick on any of your previous search terms to conduct a\r\n\t\t\t\t\t\t\tretroactive search.\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t{searches.map((search) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-info m-2\"\r\n\t\t\t\t\t\t\t\t\tid={search}\r\n\t\t\t\t\t\t\t\t\tkey={search}\r\n\t\t\t\t\t\t\t\t\tonClick={this.retroSearch}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{search}\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tsearches: state.searches\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tfetchResults: (query) => dispatch(fetchResults(query))\r\n\t};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchHistory);\r\n","import React, { Component } from \"react\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport SearchResults from \"./components/SearchResults/SearchResults\";\nimport SearchHistory from \"./components/SearchHistory/SearchHistory\";\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Navbar />\n\t\t\t\t<div className=\"container mt-5 text-center\">\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<div className=\"col-6\">\n\t\t\t\t\t\t\t<SearchResults />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"col-6\">\n\t\t\t\t\t\t\t<SearchHistory />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// For the size of this application, only a root reducer is necessary\r\n\r\n// Initializing the redux state. We want to track search history and hold search results.\r\nconst initState = {\r\n\tsearches: [],\r\n\tresults: []\r\n};\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n\tif (action.type === \"CREATE_SEARCH\") {\r\n\t\treturn {\r\n\t\t\t...state,\r\n\t\t\tsearches: [...state.searches, action.terms]\r\n\t\t};\r\n\t} else if (action.type === \"FETCH_RESULTS\") {\r\n\t\treturn {\r\n\t\t\t...state,\r\n\t\t\tresults: action.results\r\n\t\t};\r\n\t} else if (action.type === \"FETCH_RESULTS_ERROR\") {\r\n\t\tconsole.log(\"fetch results error\", action.err);\r\n\t\treturn state;\r\n\t}\r\n\treturn state;\r\n};\r\n\r\nexport default rootReducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./reducers/rootReducer\";\nimport thunk from \"redux-thunk\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}